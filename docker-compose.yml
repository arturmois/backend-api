version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      target: development
    container_name: bens-seguros-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bens_seguros
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/bens_seguros
      - TEST_DB_NAME=bens_seguros_test
      - TEST_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/bens_seguros_test
      - JWT_SECRET=your-super-secret-jwt-key-for-development
      - JWT_EXPIRES_IN=24h
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bens-seguros-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: bens-seguros-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bens_seguros
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - bens-seguros-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bens_seguros"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: bens-seguros-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bens-seguros-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bens-seguros-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - bens-seguros-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: bens-seguros-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bens-seguros-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # nginx as reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bens-seguros-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - bens-seguros-network
    restart: unless-stopped

networks:
  bens-seguros-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local